server.port = 8081
logging.level.org.springframework=WARN
logging.level.org.hibernate=WARN
logging.level.com.springsecurity.demo=DEBUG
        
# Connection url for the database "data_repo_voorbeeld" and circumventing timezone issues

spring.datasource.url=jdbc:mysql://localhost:3306/mijn_inzet?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC

# Username and password
spring.datasource.username = nopressure
spring.datasource.password = nopressure

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update


# Naming strategy: tussenVoegsel wordt tussen_voegsel
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

#Dit komt van Semih (StackOverflow) en lost de error op mbt hibernate_sequence table does not exist
spring.jpa.properties.hibernate.id.new_generator_mappings=false



spring.queries.users-query=select email, password, '1' as enabled from user where email=? and status='VERIFIED'
spring.queries.rolesOfUser-query=select u.email, r.role_name from user u inner join user_role ur on(u.user_id=ur.user_id) inner join roleName r on(ur.role_id=r.role_id) where u.email=?


# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query


# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project


# Naming strategy: tussenVoegsel wordt tussen_voegsel


# Allows Hibernate to generate SQL optimized for a particular DBMS

######Email Properties ######
spring.mail.transport.protocol=smtp
spring.mail.from.email=nopressure532@gmail.com
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.username=nopressure532@gmail.com
spring.mail.password=abc123ABC@
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000


spring.thymeleaf.mode=LEGACYHTML5
spring.thymeleaf.cache=false